#!/usr/bin/env ruby

require File.dirname(__FILE__) + '/../lib/word_search'

class Lookup
  attr_reader :dir, :probabilistic_sorting
  attr_writer :fulltext_reader

  def initialize(dir, probabilistic_sorting)
    @dir = dir
    @probabilistic_sorting = probabilistic_sorting
  end
  
  def fulltext_reader
    @fulltext_reader ||= WordSearch::FulltextReader.new(:path => "#{dir}/fulltext")
  end
  
  def suffix_array_reader
    @suffix_array_reader ||= WordSearch::SuffixArrayReader.new(fulltext_reader, nil, :path => "#{dir}/suffixes")
  end
  
  def doc_map_reader
    @doc_map_reader ||= WordSearch::DocumentMapReader.new(:path => "#{dir}/docmap")
  end
  
  def search_a(line)
    line = line[1..-1]
    t = Time.new
    hit = suffix_array_reader.find_first(line)
    puts "Needed #{Time.new - t}"
    p hit
    next unless hit
    p hit.context(30)
    t = Time.new
    puts "Total hits: #{suffix_array_reader.count_hits(line)} (#{Time.new - t})"
  end

  def search_b(line)
    h = Hash.new{|h,k| h[k] = 0}
    weights = Hash.new(1.0)
    weights[0] = 10000000  # :uri
    weights[1] = 10000000  # :body
    t0 = Time.new
    hits = suffix_array_reader.find_all(line)
    d1 = Time.new - t0
    t1 = Time.new
    size = hits.size
    if probabilistic_sorting && size > 10000
      iterations = 50 * Math.sqrt(size)
      offsets = suffix_array_reader.lazyhits_to_offsets(hits)
      weight_arr = weights.sort_by{|id,w| id}.map{|_,v| v}
      sorted = doc_map_reader.rank_offsets_probabilistic(offsets, weight_arr,
                                                         iterations)
    else
      offsets = suffix_array_reader.lazyhits_to_offsets(hits)
      sorted = doc_map_reader.rank_offsets(offsets, weights.sort_by{|id,w| id}.map{|_,v| v})
      d1 
    end
    d2 = Time.new - t1
    #sorted[0..100].each{|doc_id, score| doc_map_reader.document_id_to_uri(doc_id)}
    t2 = Time.new
    sorted.each {|doc_id, score| doc_map_reader.document_id_to_uri(doc_id) }
    d3 = Time.new - t2
    d4 = Time.new - t0
    puts "Needed #{d1} for the search."
    puts "Needed #{d2} to rank #{hits.size} hits into #{sorted.size} docs"
    puts "Needed #{d3} to get the URIs."
    puts "Total time: #{d4}"
    puts "Showing top 10 matches:"
    puts sorted[0..10].map{ |doc_id, count|
      "%6d %5d %s" % [count, doc_id, doc_map_reader.document_id_to_uri(doc_id)]
    }
  end
end

dir = ARGV[0] || "INDEX-test"
probabilistic_sorting = ((ARGV.last||"").index("pro"))

lookup = Lookup.new(dir, probabilistic_sorting)

until (print "Input term: "; line = $stdin.gets.chomp).empty?
  if line[0] == ?!
    lookup.search_a(line)
  else
    lookup.search_b(line)
  end
end

